#!/usr/bin/python3
"""
This module contains the test suite for the BaseModel class.
The test suite includes various test cases to ensure the correct
functioning of the BaseModel class.
"""

import unittest
from time import sleep
from datetime import datetime
from uuid import uuid4

import models
from models.base_model import BaseModel


class TestBaseModel(unittest.TestCase):
    """
    The test suite for models.base_model.BaseModel.
    This class contains test cases to verify the functionality
    of the BaseModel class.
    """

    def test_if_BaseModel_instance_has_id(self):
        """
        Test that checks if an instance of BaseModel has an
        ID assigned on initialization.
        """
        b = BaseModel()
        self.assertTrue(hasattr(b, "id"))

    def test_ids_is_unique(self):
        """
        Test that checks if the IDs generated by BaseModel are unique.
        """
        b1 = BaseModel()
        b2 = BaseModel()
        self.assertNotEqual(b1.id, b2.id)

    def test_type_of_id_is_str(self):
        """
        Test that checks if the ID generated by BaseModel is a string object.
        """
        b = BaseModel()
        self.assertTrue(type(b.id) is str)

    def test_created_at_is_datetime(self):
        """
        Test that checks if the 'created_at' attribute of
        BaseModel is a datetime object.
        """
        b = BaseModel()
        self.assertTrue(type(b.created_at) is datetime)

    def test_updated_at_is_datetime(self):
        """
        Test that checks if the 'updated_at' attribute of
        BaseModel is a datetime object.
        """
        b = BaseModel()
        self.assertTrue(type(b.updated_at) is datetime)

    def test_two_models_different_created_at(self):
        """
        Test that checks if the 'created_at' attribute of
        two BaseModel instances is different.
        """
        b1 = BaseModel()
        sleep(0.09)
        b2 = BaseModel()
        sleep(0.09)
        self.assertLess(b1.created_at, b2.created_at)

    def test_args_unused(self):
        """
        Test that checks if the 'args' attribute is not used in BaseModel.
        """
        b = BaseModel(None)
        self.assertNotIn(None, b.__dict__.values())

    def test_that_created_at_equals_updated_at_initially(self):
        """
        Test that checks if 'created_at' is equal to 'updated_at'
        at initialization of BaseModel.
        """
        b = BaseModel()
        self.assertEqual(b.created_at, b.updated_at)

    def test_that_save_func_update_update_at_attr(self):
        """
        Test that checks if the 'save' method updates the
        'updated_at' attribute of BaseModel.
        """
        b = BaseModel()
        b.save()
        self.assertNotEqual(b.created_at, b.updated_at)
        self.assertGreater(b.updated_at.microsecond, b.created_at.microsecond)

    def test_if_to_dict_returns_dict(self):
        """
        Test that checks if BaseModel.to_dict() returns a dictionary object.
        """
        b = BaseModel()
        self.assertTrue(type(b.to_dict()) is dict)

    def test_if_to_dict_returns_class_dunder_method(self):
        """
        Test that checks if BaseModel.to_dict() contains the '__class__' key.
        """
        b = BaseModel()
        self.assertTrue("__class__" in b.to_dict())

    def test_that_created_at_returned_by_to_dict_is_an_iso_string(self):
        """
        Test that checks if 'created_at' is stored as a string object in
        ISO format in the dictionary returned by to_dict().
        """
        b = BaseModel()
        self.assertEqual(b.to_dict()["created_at"], b.created_at.isoformat())

    def test_that_updated_at_returned_by_to_dict_is_an_iso_string(self):
        """
        Test that checks if 'updated_at' is stored as a string object in
        ISO format in the dictionary returned by to_dict().
        """
        b = BaseModel()
        self.assertEqual(b.to_dict()["updated_at"], b.updated_at.isoformat())

    def test_if_to_dict_returns_the_accurate_number_of_keys(self):
        """
        Test that checks if to_dict() returns the expected number of
        keys/values in the dictionary.
        """
        b = BaseModel()
        p_exp = {k: v for k, v in b.__dict__.items() if not k.startswith("_")}
        self.assertEqual(len(b.to_dict()), len(p_exp) + 1)

    def test_when_kwargs_passed_is_empty(self):
        """
        Test that checks if 'id', 'created_at', and 'updated_at' are
        automatically generated if they're not present in kwargs.
        """
        my_dict = {}
        b = BaseModel(**my_dict)
        self.assertTrue(type(b.id) is str)
        self.assertTrue(type(b.created_at) is datetime)
        self.assertTrue(type(b.updated_at) is datetime)

    def test_when_args_and_kwargs_are_passed(self):
        """
        Test that checks if BaseModel ignores 'args' when both 'args'
        and 'kwargs' are passed.
        """
        dt = datetime.now()
        dt_iso = dt.isoformat()
        b = BaseModel("6789", id="334", created_at=dt_iso, name="anna_muturi")
        self.assertEqual(b.id, "334")
        self.assertEqual(b.created_at, dt)
        self.assertEqual(b.name, "anna_muturi")

    def test_when_kwargs_passed_is_more_than_default(self):
        """
        Test that checks if BaseModel does not break when kwargs contains
        additional attributes beyond the default ones.
        """
        my_dict = {
            "id": uuid4(),
            "created_at": datetime.utcnow().isoformat(),
            "updated_at": datetime.utcnow().isoformat(),
            "name": "nicky_mane"
        }
        b = BaseModel(**my_dict)
        self.assertTrue(hasattr(b, "name"))

    def test_new_method_not_called_when_dict_obj_is_passed_to_BaseModel(self):
        """
        Test that checks if the storage.new() method is not called when
        a BaseModel object is created from a dictionary object.
        """
        my_dict = {
            "id": uuid4(),
            "created_at": datetime.utcnow().isoformat(),
            "updated_at": datetime.utcnow().isoformat(),
            "name": "nicky_mane"
        }
        b = BaseModel(**my_dict)
        self.assertTrue(b not in models.storage.all().values())
        del b

        b = BaseModel()
        self.assertTrue(b in models.storage.all().values())

    def test_that_save_method_updates_updated_at_attr(self):
        """
        Test that checks if the 'save' method updates the 'updated_at'
        attribute of BaseModel.
        """
        b = BaseModel()
        sleep(0.05)
        temp_update = b.updated_at
        b.save()
        self.assertLess(temp_update, b.updated_at)

    def test_that_save_can_update_two_or_more_times(self):
        """
        Test that checks if the 'save' method updates the 'updated_at'
        attribute of BaseModel multiple times.
        """
        b = BaseModel()
        sleep(0.05)
        temp_update = b.updated_at
        b.save()
        sleep(0.05)
        temp1_update = b.updated_at
        self.assertLess(temp_update, temp1_update)
        sleep(0.05)
        b.save()
        self.assertLess(temp1_update, b.updated_at)

    def test_save_update_file(self):
        """
        Test that checks if the file is updated when
        the 'save' method is called.
        """
        b = BaseModel()
        b.save()
        bid = "BaseModel.{}".format(b.id)
        with open("file.json", encoding="utf-8") as f:
            self.assertIn(bid, f.read())

    def test_that_to_dict_contains_correct_keys(self):
        """
        Test that checks if the dictionary returned by
        to_dict() contains the expected keys.
        """
        b_dict = BaseModel().to_dict()
        attrs = ("id", "created_at", "updated_at", "__class__")
        for attr in attrs:
            self.assertIn(attr, b_dict)

    def test_to_dict_contains_added_attributes(self):
        """
        Test that checks if to_dict() includes the newly
        added attributes in BaseModel.
        """
        b = BaseModel()
        attrs = ["id", "created_at", "updated_at", "__class__"]
        b.name = "Nicholas"
        b.email = "nichlasodhiambo@gmail.com"
        attrs.extend(["name", "email"])
        for attr in attrs:
            self.assertIn(attr, b.to_dict())

    def test_to_dict_output(self):
        """
        Test that checks the output returned by to_dict()
        against the expected dictionary.
        """
        b = BaseModel()
        dt = datetime.now()
        b.id = "78912"
        b.created_at = b.updated_at = dt
        test_dict = {
            'id': "78912",
            'created_at': dt.isoformat(),
            'updated_at': dt.isoformat(),
            '__class__': 'BaseModel'
        }
        self.assertDictEqual(test_dict, b.to_dict())

    def test_to_dict_with_args(self):
        """
        Test that checks if a TypeError is raised when an
        argument is passed to to_dict().
        """
        b = BaseModel()
        with self.assertRaises(TypeError):
            b.to_dict(None)

    def test_to_dict_not_dunder_dict(self):
        """
        Test that checks if to_dict() returns a dictionary object that is
        not equal to the '__dict__' attribute of BaseModel.
        """
        bm = BaseModel()
        self.assertNotEqual(bm.to_dict(), bm.__dict__)


if __name__ == "__main__":
    unittest.main()
