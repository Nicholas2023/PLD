#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>


/*Define constants for max path and filename length*/
#define MAX_PATH_LENGTH 1024
#define MAX_FILENAME_LENGTH 256

int main(int argc, char **argv)
{
	/*Variable declaration*/
	char *path, path_copy[MAX_PATH_LENGTH], *dir, *filename;
	char filepath[MAX_PATH_LENGTH + MAX_FILENAME_LENGTH + 1];


	/*Get the PATH environment variable*/
	path = getenv("PATH");

	/*Check if the program was called with the correct number of arguments*/
	if (argc < 2)
	{
		fprintf(stderr, "Usage: %s filename ...\n", argv[0]);
		return (1);
	}

	/*Copy the PATH string to a buffer*/
	strncpy(path_copy, path, MAX_PATH_LENGTH -1);

	/*Make sure the buffer is null terminated*/
	path_copy[MAX_PATH_LENGTH - 1] = '\0';

	/*Get the filename to search for from the program arguments*/
	filename = argv[1];

	/*Split the PATH string into directories using ':' as a delimiter*/
	dir = strtok(path_copy, ":");

	/*Loop through each directory in the PATH*/

	while (dir)
	{
		/*Create the full file path by concatenating the directory and the filename*/
		snprintf(filepath, MAX_PATH_LENGTH + MAX_FILENAME_LENGTH, "%s/%s", dir, filename);
		/*Check if the file exists at this path*/
		if (access(filepath, F_OK) == 0)
		{
			printf("%s\n", filepath);
			return (0);
		}

		/*Get the next directory in the PATH*/
		dir = strtok(NULL, ":");
	}

	/*If the file was not fount in the PATH, print an error message and exit with status 1*/
	fprintf(stderr, "%s not found in PATH\n", filename);

	return (1);
}






